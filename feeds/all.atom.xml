<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joshua Ellis's Blog</title><link href="https://jp-ellis.github.io/" rel="alternate"></link><link href="https://jp-ellis.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jp-ellis.github.io/</id><updated>2015-12-08T00:00:00+11:00</updated><entry><title>Git Hooks</title><link href="https://jp-ellis.github.io/2015/12/git-hooks/" rel="alternate"></link><updated>2015-12-08T00:00:00+11:00</updated><author><name>Joshua Ellis</name></author><id>tag:jp-ellis.github.io,2015-12-08:2015/12/git-hooks/</id><summary type="html">&lt;p&gt;This blog is generated using &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; which is based on &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;, and in order to
manage the differences between source code and the generated code, I use &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;git
hooks&lt;/a&gt;.  I have it
setup so that whenever I run &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;, all the HTML files are regenerated
and a new commit is added and pushed in the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch (which ultimately
becomes the HTML is this site).&lt;/p&gt;
&lt;p&gt;The following example goes through my setup with Github Pages, though it could
equivalently be used to push to another server, or anything else really since
the hook is a simple bash script.&lt;/p&gt;
&lt;div class="section" id="github-pages-setup"&gt;
&lt;h2&gt;Github Pages Setup&lt;/h2&gt;
&lt;p&gt;I am using &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; for this website which
serves the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch from the repository called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jp-ellis.github.io&lt;/span&gt;&lt;/tt&gt;.
I keep the source code in the &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; branch which is independent to the
&lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch (and similarly for the &lt;tt class="docutils literal"&gt;theme&lt;/tt&gt; branch tracks &lt;a class="footnote-reference" href="#theme" id="id2"&gt;[1]&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The idea is to create separate repositories with separate branch names, and then
afterwards push them to the same remote repository:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/web/jp-ellis.github.io
&lt;span class="c"&gt;# Setup git and create a new source branch&lt;/span&gt;
git init .
git checkout --orphan &lt;span class="nb"&gt;source&lt;/span&gt;
git remote add origin git@github.com:JP-Ellis/jp-ellis.github.io.git
&lt;span class="c"&gt;# Setup the master branch&lt;/span&gt;
git init ./output
git remote add origin git@github.com:JP-Ellis/jp-ellis.github.io.git
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;At this stage, we have one repository inside the other.  We can make the parent
directory track the smaller directory with &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodules&lt;/a&gt;.  This is not strictly
necessary in this case as the code in the parent repository doesn't rely on the
sub-repository; however, this can be quite useful if the sub-repository is used
as a dependency.  The submodule can be create with:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/web/jp-ellis.github.io
git submodule add git@github.com:JP-Ellis/jp-ellis.github.io.git ./output
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;At this stage, we can make all the changes to the code and commit them as usual,
and once ready we can commit the changes to the output and push everything.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/web/jp-ellis.github.io
&lt;span class="c"&gt;# Make all the appropriate commits&lt;/span&gt;
&lt;span class="c"&gt;# Push the source and set upstream&lt;/span&gt;
git push --set-upstream origin &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;output
&lt;span class="c"&gt;# Similarly, make appropriate commits and push&lt;/span&gt;
git push --set-upstream origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;At this stage, all the changes have been pushed to Github and the Github Pages
(assuming it has been enabled in the settings) should have updated and the
website is visible.  At this stage though, subsequent changes are annoying
because the commands in the last block of code have to be repeated every single
time---and knowing myself, I am bound to forget updating the output and pushing
the changes to the generated code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Git Hooks&lt;/h2&gt;
&lt;p&gt;In order to automate the process of pushing the source, regenerating the output
and pushing the output, I want to use &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git hooks&lt;/a&gt;.  Specifically, I
will have it setup such that every time I run &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt; in the source, all
the steps I run automatically.&lt;/p&gt;
&lt;p&gt;The hooks are simple executable scripts located in &lt;tt class="docutils literal"&gt;.git/hooks/&lt;/tt&gt;.  By default,
new repositories have a few sample scripts which end in &lt;tt class="docutils literal"&gt;.sample&lt;/tt&gt; which can be
put to use by removing the extension.&lt;/p&gt;
&lt;p&gt;In my particular case, I want to regenerate the output through &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;,
automatically commit all the changes in the &lt;tt class="docutils literal"&gt;./output&lt;/tt&gt; directory and finally
push both generated code and the source code.  The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pre-push&lt;/span&gt;&lt;/tt&gt; hook is what I
need for that as it is run before &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;.  The annotated content of my
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pre-push&lt;/span&gt;&lt;/tt&gt; script is:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c"&gt;# Get the short hash of the latest source commit&lt;/span&gt;
&lt;span class="nv"&gt;commit_hash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse --short HEAD&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Regenerate the output, and return an error if it fails (otherwise move on)&lt;/span&gt;
make publish &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; 1
&lt;span class="c"&gt;# Move to the output directory&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;output
&lt;span class="c"&gt;# Tell git we&amp;#39;re working on a different repository&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# If there are no changes (i.e. git diff exist with 1),&lt;/span&gt;
git diff --exit-code 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &amp;gt;/dev/null
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# Stage, commit and push everything&lt;/span&gt;
    git add --all
    git commit -m &lt;span class="s2"&gt;&amp;quot;Update to &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;commit_hash&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
    git push
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No changes to &amp;#39;output&amp;#39;.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Finally, with all this setup I just need to run &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt; and the website will be automatically updated!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="theme" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The reason for the theme being tracked in a separate branch is that
I may end up moving the branch to its own proper repository in the
future, and I could do the same for the source branch though I think
it makes more sense to keep the source and output in the same
repositories.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="git"></category></entry></feed>