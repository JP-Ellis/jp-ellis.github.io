<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joshua Ellis</title><link href="https://jpellis.me/" rel="alternate"></link><link href="https://jpellis.me/feeds/all.atom.xml" rel="self"></link><id>https://jpellis.me/</id><updated>2015-12-08T00:00:00+11:00</updated><entry><title>Git Hooks</title><link href="https://jpellis.me/2015/12/git-hooks/" rel="alternate"></link><published>2015-12-08T00:00:00+11:00</published><updated>2015-12-08T00:00:00+11:00</updated><author><name>Joshua Ellis</name></author><id>tag:jpellis.me,2015-12-08:/2015/12/git-hooks/</id><summary type="html">&lt;p&gt;Git is a powerful version control system which has become the &lt;em&gt;de facto&lt;/em&gt;
standard in recent years (judging by the popularity
of &lt;a href="https://www.github.com/"&gt;Github&lt;/a&gt;).  Perhaps one of Git&amp;#8217;s underused features
is its &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;hooks&lt;/a&gt;: small
scripts that are run whenever a specific action is run.  For example, one could
set up a &lt;em&gt;pre-push&lt;/em&gt; hook that runs the test suite so that breaking changes
aren&amp;#8217;t inadvertently introduced.  Another common use for hooks is to deploy
changes.  For example, one could have a server hosting a
basic &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; or &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; blog
and using the &lt;em&gt;post-update&lt;/em&gt; hook one could get the server to automatically
regenerate the website whenever changes are pushed onto the server.  Since Git
hooks allow &lt;em&gt;any&lt;/em&gt; script to be executed, hooks can be used to automate nearly
any&amp;nbsp;task.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Git is a powerful version control system which has become the &lt;em&gt;de facto&lt;/em&gt;
standard in recent years (judging by the popularity
of &lt;a href="https://www.github.com/"&gt;Github&lt;/a&gt;).  Perhaps one of Git&amp;#8217;s underused features
is its &lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;hooks&lt;/a&gt;: small
scripts that are run whenever a specific action is run.  For example, one could
set up a &lt;em&gt;pre-push&lt;/em&gt; hook that runs the test suite so that breaking changes
aren&amp;#8217;t inadvertently introduced.  Another common use for hooks is to deploy
changes.  For example, one could have a server hosting a
basic &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; or &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; blog
and using the &lt;em&gt;post-update&lt;/em&gt; hook one could get the server to automatically
regenerate the website whenever changes are pushed onto the server.  Since Git
hooks allow &lt;em&gt;any&lt;/em&gt; script to be executed, hooks can be used to automate nearly
any&amp;nbsp;task.&lt;/p&gt;


&lt;p&gt;This website is generated using Pelican and is hosted
with &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;.  Github Pages allows you to host
your website for free with Github, and all you need to do is create a repository
called &lt;code&gt;USERNAME.github.io&lt;/code&gt; and then Github will automatically start serving the
&lt;span class="caps"&gt;HTML&lt;/span&gt; files from the &lt;code&gt;master&lt;/code&gt; branch of that repository&lt;sup id="fnref-fn:jekyll"&gt;&lt;a class="footnote-ref" href="#fn-fn:jekyll"&gt;1&lt;/a&gt;&lt;/sup&gt;.  Github
Pages also allows you to have per-projects websites.  In this case, you need to
create a branch called &lt;code&gt;gh-pages&lt;/code&gt; in any of your current repositories and Github
will then serve the content of that branch over at
&lt;code&gt;USERNAME.github.io/REPOSITORY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I first go through how my Github Pages is organized and then how I use Git&amp;nbsp;hooks&lt;/p&gt;
&lt;h1&gt;Github Pages&amp;nbsp;Setup&lt;/h1&gt;
&lt;p&gt;I have set up my &lt;code&gt;jp-ellis.github.io&lt;/code&gt; with three&amp;nbsp;branches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt; contains the original files Pelican uses in order to generate the&amp;nbsp;website;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt; contains the output generated by Pelican.  Nearly all commits
  should be automatically&amp;nbsp;generated;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt; contains the theme-specific files.  This could be included within
  the &lt;code&gt;source&lt;/code&gt; branch, but I have kept it separate in case I want to load
  another theme, or if I wish to move the theme to its own&amp;nbsp;repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the &lt;code&gt;source&lt;/code&gt; branch requires the &lt;code&gt;theme&lt;/code&gt; branch, it is a good idea to add
the &lt;code&gt;theme&lt;/code&gt; branch as
a &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodule&lt;/a&gt; of &lt;code&gt;source&lt;/code&gt;.
This means that if you clone the &lt;code&gt;source&lt;/code&gt; branch into a new directory, you can
also have Git clone submodules at once.  I have done the same with the &lt;code&gt;master&lt;/code&gt;
branch so that in the end, my repository has the following&amp;nbsp;structure:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jp-ellis.github.io/   &amp;lt;-- source branch
├── content/
├── output/           &amp;lt;-- master branch (submodule)
├── themes/
│   └── jp-ellis/     &amp;lt;-- theme branch (submodule)
└── ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;With everything setup this way, the general procedure to update the website&amp;nbsp;is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the changes to the &lt;code&gt;source&lt;/code&gt; branch, commit&amp;nbsp;them;&lt;/li&gt;
&lt;li&gt;Push the &lt;code&gt;source&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;make publish&lt;/code&gt; in order to generate the content with&amp;nbsp;Pelican;&lt;/li&gt;
&lt;li&gt;Stage and commit all the changes in &lt;code&gt;./output/&lt;/code&gt; and push&amp;nbsp;them;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although four steps isn&amp;#8217;t all that much, steps 3 and 4 are tedious and always
the same and lend themselves very well to being automated by using the Git
&lt;code&gt;pre-push&lt;/code&gt; hook.&lt;/p&gt;
&lt;h1&gt;Git Pre-push&amp;nbsp;Hook&lt;/h1&gt;
&lt;p&gt;In order to automate steps 3 and 4 in the above list, I will use the
&lt;code&gt;pre-push&lt;/code&gt; hook.  As the name suggests, this hook is executed before every
push and if the script exits with a non-zero code, the push is aborted.  This
could be used to make sure that breaking changes aren&amp;#8217;t pushed, or in my case,
to make sure that generated content always follows closely the source files used
to generate the&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;The hooks are simple executable scripts located in &lt;code&gt;.git/hooks/&lt;/code&gt;.  By default,
new repositories have a few sample scripts which end in &lt;code&gt;.sample&lt;/code&gt; which can be
put to use by removing the extension.  The script needs to have the executable
flag set (with &lt;code&gt;chmod +x &amp;lt;hook&amp;gt;&lt;/code&gt; and can be in any scripting language you
want, whether that be Python, bash, or whatever you&amp;nbsp;prefer.&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;pre-push&lt;/code&gt; hook consists of the following&amp;nbsp;file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/zsh&lt;/span&gt;

&lt;span class="nv"&gt;commit_hash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git rev-parse --short HEAD&lt;span class="k"&gt;)&lt;/span&gt;
make publish &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; output
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GIT_WORK_TREE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
git diff --exit-code &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; -eq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    rm -rf pages
    git add --all
    git commit -m &lt;span class="s2"&gt;&amp;quot;Update to &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;commit_hash&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
    git push
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No changes to the &amp;#39;output&amp;#39;.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The script begins in the root of the &lt;code&gt;source&lt;/code&gt; branch where it gets the short
hash of the latest commit (line 3).  It then uses &lt;code&gt;make publish&lt;/code&gt; in order to
generate the content with Pelican and if, for any reason, that fails the hook
exits with a non-zero value causing the push to be&amp;nbsp;aborted.&lt;/p&gt;
&lt;p&gt;Once the content is generated, we switch branches (line 5) and update
&lt;code&gt;GIT_WORK_TREE&lt;/code&gt;.  This is an environment variable that overrides where Git looks
for file.  Typically, it is not set and the repository is inferred based on the
current working directory but in the case of a hook, &lt;code&gt;GIT_WORK_TREE&lt;/code&gt; is set and
changing directories to another repository doesn&amp;#8217;t actually cause Git to change&amp;nbsp;directories.&lt;/p&gt;
&lt;p&gt;Next, we check if there are any changes to be content with &lt;code&gt;git diff
--exit-code&lt;/code&gt;.  This exist with status &lt;code&gt;1&lt;/code&gt; if there are changes, and status &lt;code&gt;0&lt;/code&gt;
if there are none.  Line 8 then checks for this exit code and if there is no
change it simply says that there is nothing to be done.  On the other hand, if
there are changes it stages everything (line 10), commits it with a reference to
the corresponding commit in &lt;code&gt;source&lt;/code&gt; (line 11) and pushes the changes (line&amp;nbsp;12).&lt;/p&gt;
&lt;p&gt;The only line I have no addressed is line 9: &lt;code&gt;rm -rf pages&lt;/code&gt;.  The &lt;code&gt;pages&lt;/code&gt;
directory is created by Pelican because it contains submodules, and these
submodules have a special &lt;code&gt;.git&lt;/code&gt; symlink which Pelican treats as a file.  As a
result, Pelican copies the hierarchy up to the &lt;code&gt;.git&lt;/code&gt; symlink which ultimately
causes Github to get confused because when it receives the pages, it tries to
load the submodule and&amp;nbsp;fails.&lt;/p&gt;
&lt;p&gt;Thanks to the &lt;code&gt;pre-push&lt;/code&gt; script, running &lt;code&gt;git push&lt;/code&gt; from the parent directory
takes care of pushing all the changes to the website&amp;nbsp;automatically.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-fn:jekyll"&gt;
&lt;p&gt;Github also supports Jekyll sites.  In this case, you can just
upload the Jekyll source files and Github will automatically generate the output
and serve that.  Unfortunately, you can&amp;#8217;t customize which Gems Github uses, so
this option is not as flexible.&amp;#160;&lt;a class="footnote-backref" href="#fnref-fn:jekyll" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="git"></category></entry></feed>